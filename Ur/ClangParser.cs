using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using ClangSharp;

namespace Ur
{
	public class ClangParser
	{
		private TextWriter _output;

		public void Process(ConversionParameters parameters)
		{
			if (parameters == null)
			{
				throw new ArgumentNullException("parameters");
			}

			Utility.Classes.Clear();
			foreach (var c in parameters.Classes)
			{
				Utility.Classes.Add(c);
			}

			var arr = new List<string>();

			foreach (var d in parameters.Defines)
			{
				arr.Add("-D" + d);
			}

			var createIndex = clang.createIndex(0, 0);
			CXUnsavedFile unsavedFile;

			CXTranslationUnit tu;
			var res = clang.parseTranslationUnit2(createIndex,
				parameters.InputPath,
				arr.ToArray(),
				arr.Count,
				out unsavedFile,
				0,
				0,
				out tu);

			var numDiagnostics = clang.getNumDiagnostics(tu);
			for (uint i = 0; i < numDiagnostics; ++i)
			{
				var diag = clang.getDiagnostic(tu, i);
				var str =
					clang.formatDiagnostic(diag, 
					(uint) (CXDiagnosticDisplayOptions.CXDiagnostic_DisplaySourceLocation | CXDiagnosticDisplayOptions.CXDiagnostic_DisplaySourceRanges)).ToString();
				Logger.LogLine(str);
				clang.disposeDiagnostic(diag);
			}

			if (res != CXErrorCode.CXError_Success)
			{
				var sb = new StringBuilder();

				sb.AppendLine(res.ToString());

				numDiagnostics = clang.getNumDiagnostics(tu);
				for (uint i = 0; i < numDiagnostics; ++i)
				{
					var diag = clang.getDiagnostic(tu, i);
					sb.AppendLine(clang.getDiagnosticSpelling(diag).ToString());
					clang.disposeDiagnostic(diag);
				}

				throw new Exception(sb.ToString());
			}

			_output = parameters.Output;

			_output.WriteLine("// Generated by Ur at {0}", DateTime.Now);
			_output.WriteLine();

			_output.WriteLine("using System;");
			_output.WriteLine("using System.Runtime.InteropServices;");
			_output.WriteLine();

			if (!string.IsNullOrEmpty(parameters.Namespace))
			{
				_output.Write("namespace {0}\n{{\n\t", parameters.Namespace);
			}

			_output.Write("unsafe {0} class {1}\n\t{{\n",
				parameters.IsPartial ? "partial" : string.Empty,
				parameters.Class);

			// Process
			var processor = new ConversionProcessor(parameters, tu, _output);
			// var processor = new DumpProcessor(tu, _output);
			processor.Run();

			_output.Write("\t}");

			if (!string.IsNullOrEmpty(parameters.Namespace))
			{
				_output.Write("\n}\n");
			}

			clang.disposeTranslationUnit(tu);
			clang.disposeIndex(createIndex);
		}
	}
}